// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")

}

model Guild {
  id             Int    @id @default(autoincrement())
  name           String @unique
  discordUrl     String @unique
  members        Player[] @relation("memberOfGuild")
  discordGuild   DiscordGuild?
}

model Player {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  guilds    Guild[]    @relation("memberOfGuild")
  nfts      NFT[]
  sales     Sale[]     @relation("fromPlayer")
  purchases Sale[]     @relation("toPlayer")
  drops     Drop[]     @relation("toPlayer")
  spent     Float      @default(0)
  sold      Float      @default(0)
  balance   Float      @default(0)
  username  User?
}

model NFT {
  id          Int       @id @default(autoincrement())
  composedId  String    @unique
  issuedId    Int
  lootDate    DateTime?
  owner       Player?     @relation(fields: [ownerName], references: [name])
  ownerName   String?
  item        Item?     @relation(fields: [archetypeId], references: [archetypeId])
  archetypeId String?
  sales       Sale[]
  drops       Drop[]
}

model Item {
  archetypeId    String  @id @unique
  name           String  @unique
  description    String?
  imageUrl       String?
  floorPrice     Float?
  maxIssuance    Int
  set            Set?        @relation(fields: [setName], references: [name])
  setName        String?
  nfts           NFT[]
  categories     Category[]
  rarity         Rarity?     @relation(fields: [rarityName], references: [name])
  rarityName     String?
  collection     Collection? @relation(fields: [collectionName], references: [name])
  collectionName String?
  optionName     String
}

model Category {
  name  String @id @unique
  items Item[]
}

model Rarity {
  name  String @unique
  items Item[]
}

model Collection {
  name  String @unique
  items Item[]
}

model Set {
  name  String @unique
  items Item[]
}

model Sale {
  id            Int      @id @default(autoincrement())
  price         Float
  date          DateTime
  from          Player     @relation(fields: [fromPlayer], references: [name], name: "fromPlayer")
  fromPlayer    String
  to            Player     @relation(fields: [toPlayer], references: [name], name: "toPlayer")
  toPlayer      String
  nft           NFT?     @relation(fields: [nftId], references: [composedId])
  nftId         String?
}

model Drop {
  id         Int      @id @default(autoincrement())
  date       DateTime
  to         Player     @relation(fields: [toPlayer], references: [name], name: "toPlayer")
  toPlayer   String
  nft        NFT?     @relation(fields: [nftId], references: [id])
  nftId      Int?
}

model OLHistory {
  archetypeId String       @id
  olTransfers OLTransfer[]
  totalItems  Int
  lastApiPull DateTime?
  lastSync    DateTime?
  synced      Boolean
}

model OLTransfer {
  id              Int        @id @default(autoincrement())
  composedId      String     @unique
  issuedId        Int
  eventName       String
  price           Float?
  fromPlayer      String
  toPlayer        String
  date            DateTime?
  processed       Boolean    @default(false)
  OLHistory       OLHistory? @relation(fields: [archetypeId], references: [archetypeId])
  archetypeId     String?
}

model User {
  id               String      @id @default(cuid())
  name             String
  email            String?     @unique
  emailVerified    DateTime?   @map("email_verified")
  image            String?
  discriminator    String?
  global_name      String?     @unique @default("empty")
  verified         Boolean?    @default(false)
  mfa_enabled      Boolean?    @default(false)
  banner           String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  accounts         Account[]
  sessions         Session[]
  player           Player?     @relation (fields:[playerName], references: [name])
  playerName       String?     @unique
  discordGuild     DiscordGuild[]
  activity         Activity[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id            String   @id @default(cuid())
  userId        String?  @map("user_id")
  sessionToken  String   @unique @map("session_token") @db.Text
  accessToken   String?  @map("access_token") @db.Text
  expires       DateTime
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("sessions")
}


model VerificationRequest {
  id             String   @id @default(cuid())
  identifier     String
  token          String   @unique
  expires        DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([identifier, token])
}

model DiscordGuild{
  id                              Int   @id @default(autoincrement())
  discordGuildId                  String   @unique
  discordGuildName                String   @unique
  guildName                       String?  @unique
  icon                            String?
  ownerId                         String?
  approximate_number_count        Int?
  approximate_presence_count      Int?
  description                     String?
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
  user                            User[]
  guild                           Guild? @relation( fields: [guildName], references: [name])

  @@map("discord_guilds")
}

model Activity {
  id                     Int         @id @default(autoincrement())
  accountConnectionId    String      @unique
  activityName           String      @unique
  revoked                Boolean?    @default(false)
  verified               Boolean     @default(false)
  showActivity           Boolean     @default(false) @map("show_activity")
  friendSync             Boolean     @default(false) @map("friend_sync")
  twoWayLink             Boolean     @default(false) @map("two_way_link")
  typeName               String
  userGlobalName         String      @map("user_global_name")
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  user                   User        @relation( fields: [userGlobalName], references: [global_name])
  type                   Type        @relation( fields: [typeName], references: [name])

  @@map("activities")
}

model Type {
  id        Int        @id @default(autoincrement())
  name      String     @unique @default("empty")
  activity  Activity[]

  @@map("types")
}